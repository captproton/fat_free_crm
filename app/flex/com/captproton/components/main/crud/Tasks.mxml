<?xml version="1.0" encoding="utf-8"?>
<s:Skin 
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark" 
	xmlns:d="http://ns.adobe.com/fxg/2008/dt" 
	xmlns:fc="http://ns.adobe.com/flashcatalyst/2009" 
	xmlns:mx="library://ns.adobe.com/flex/mx"
	width="100%">
	
	<s:states>
		<s:State name="List" />
		<s:State name="Item" />
	</s:states>
	
	<s:layout>
		<s:VerticalLayout/>
	</s:layout>

	<fx:Script><![CDATA[
		import org.restfulx.Rx;
		import org.restfulx.utils.RxUtils;
		import fatfreecrm.models.Task;
		import fatfreecrm.models.User;
		
		[Bindable]
		private var task:Task = new Task();
		
		private function newTask():void {
			task = new Task();
			tasksList.selectedIndex = -1;
			showForm();
		}
		
		     private function saveTask():void {
		updateModelProperties();
		if (task.id) {
		task.update({onSuccess: onTaskUpdate});
		} else {
		task.create({onSuccess: onTaskCreate});
		}
		}
		  
		private function updateModelProperties():void {
		task.assignee = User(assignedToComboBox.selectedItem); 
		task.completedBy = int(completedByTextInput.text);
		task.name = nameTextInput.text;
		task.assetType = assetTypeTextInput.text;
		task.priority = priorityTextInput.text;
		task.category = categoryTextInput.text;
		task.bucket = bucketTextInput.text;
/* 		task.dueAt = dueAtDateTimeTextInput.date;
		task.completedAt = completedAtDateTimeTextInput.date;
		task.deletedAt = deletedAtDateTimeTextInput.date;
 */		task.backgroundInfo = backgroundInfoTextInput.text;
		
		task.user = User(userComboBox.selectedItem);
		}
		 
		private function destroyTask():void {
			task.destroy({onSuccess: onTaskDestroy});
		}
		
		private function onTaskSelect():void {
			task = RxUtils.clone(tasksList.selectedItem) as Task;
			showForm();
		}
		
		private function onTaskCreate(result:Task):void {
			task = new Task;
			returnToList();
		}
		
		private function onTaskUpdate(result:Task):void {
			tasksList.selectedItem = result;
			onTaskSelect();
			returnToList();
		}
		
		private function onTaskDestroy(result:Task):void {
			returnToList();
			onTaskCreate(result);
		}    
		
		private function returnToList():void{
			const state:String = currentState;
			currentState='List';
			
		}

		private function showForm():void{
			const state:String = currentState;
			currentState='Item';
			
		}
	]]></fx:Script>
	
	<s:VGroup id="tasksPanel" width="100%" height="100%"
			  visible.Item="false" includeInLayout.Item ="false">
		<mx:List id="tasksList"
				 width="100%" height="50%"
				 dataProvider="{Rx.models.index(Task)}"
				 change="onTaskSelect() "/>
		<mx:ControlBar width="50%">
			<mx:Button label="New Task" width="100%" height="30"
					   click="newTask()"/>
		</mx:ControlBar>
	</s:VGroup>
	<s:Panel title="Edit Task" cornerRadius="0" backgroundColor="#EEEEEE" width="75%" height="100%"
			 visible.List="false" includeInLayout.List ="false">
		<s:layout>
			<s:VerticalLayout/>
		</s:layout>

<!--	 <mx:Panel title="Edit Task" cornerRadius="0" backgroundColor="#EEEEEE" width="75%" height="100%">
-->	<mx:Form width="100%" height="100%">
			<mx:FormItem label="AssignedTo" width="100%">
				<mx:ComboBox id="assignedToComboBox" width="200"
							 labelField="{User.LABEL}"
							 dataProvider="{Rx.models.index(User)}" prompt="Assignee ..."
							 selectedItem="{task.assignee}"/>
			</mx:FormItem>
		<mx:FormItem label="CompletedBy" width="100%">
		<mx:TextInput id="completedByTextInput" width="100%" text="{task.completedBy}"/>
		</mx:FormItem>
		<mx:FormItem label="Name" width="100%">
		<mx:TextInput id="nameTextInput" width="100%" text="{task.name}"/>
		</mx:FormItem>
		<mx:FormItem label="AssetType" width="100%">
		<mx:TextInput id="assetTypeTextInput" width="100%" text="{task.assetType}"/>
		</mx:FormItem>
		<mx:FormItem label="Priority" width="100%">
		<mx:TextInput id="priorityTextInput" width="100%" text="{task.priority}"/>
		</mx:FormItem>
		<mx:FormItem label="Category" width="100%">
		<mx:TextInput id="categoryTextInput" width="100%" text="{task.category}"/>
		</mx:FormItem>
		<mx:FormItem label="Bucket" width="100%">
		<mx:TextInput id="bucketTextInput" width="100%" text="{task.bucket}"/>
		</mx:FormItem>
	<!--	<mx:FormItem label="DueAt" width="100%">
		<rx:DateTimeTextInput id="dueAtDateTimeTextInput" width="200" date="{task.dueAt}"/>
		</mx:FormItem>
	-->	<!--<mx:FormItem label="CompletedAt" width="100%">
		<rx:DateTimeTextInput id="completedAtDateTimeTextInput" width="200" date="{task.completedAt}"/>
		</mx:FormItem>-->
	<!--	<mx:FormItem label="DeletedAt" width="100%">
		<rx:DateTimeTextInput id="deletedAtDateTimeTextInput" width="200" date="{task.deletedAt}"/>
		</mx:FormItem>
	-->	<mx:FormItem label="BackgroundInfo" width="100%">
		<mx:TextInput id="backgroundInfoTextInput" width="100%" text="{task.backgroundInfo}"/>
		</mx:FormItem>
		<mx:FormItem label="User" width="100%">
		<mx:ComboBox id="userComboBox" width="200"
		labelField="{User.LABEL}"
		dataProvider="{Rx.models.index(User)}" prompt="User ..."
		selectedItem="{task.user}"/>
		</mx:FormItem>
	</mx:Form>
	<mx:ControlBar width="100%">
		<mx:Button label="Cancel" width="50%" height="30"
				   click="returnToList()"/>

	<mx:Button label="Save Task" width="50%" height="30"
	click="saveTask()"/>
	<mx:Button label="Delete Task" width="50%" height="30"
	enabled="{RxUtils.canDeleteModel(task)}"
	click="destroyTask()"/>
	</mx:ControlBar>
	</s:Panel>
</s:Skin>