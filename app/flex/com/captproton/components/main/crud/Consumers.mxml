<?xml version="1.0" encoding="utf-8"?>
<s:Skin 
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark" 
	xmlns:d="http://ns.adobe.com/fxg/2008/dt" 
	xmlns:fc="http://ns.adobe.com/flashcatalyst/2009" 
	xmlns:mx="library://ns.adobe.com/flex/mx"
	width="100%">
	
	<s:states>
		<s:State name="Consumers" />
		<s:State name="ConsumerItem" />
	</s:states>
	
	<s:layout>
		<s:VerticalLayout/>
	</s:layout>
	
	<fx:Script><![CDATA[
    import org.restfulx.Rx;
    import org.restfulx.utils.RxUtils;
    import fatfreecrm.models.Account;
    import fatfreecrm.models.User;

    [Bindable]
    private var account:Account = new Account();

    private function newAccount():void {
      account = new Account();
      accountsList.selectedIndex = -1;
    }

    private function saveAccount():void {
      updateModelProperties();
      if (account.id) {
        account.update({onSuccess: onAccountUpdate});
      } else {
        account.create({onSuccess: onAccountCreate});
      }
    }
  
    private function updateModelProperties():void {
 	  account.assignee = User(assignedToComboBox.selectedItem); 
      account.name = nameTextInput.text;
      account.access = accessTextInput.text;
      account.website = websiteTextInput.text;
      account.tollFreePhone = tollFreePhoneTextInput.text;
      account.phone = phoneTextInput.text;
      account.fax = faxTextInput.text;
/*       account.deletedAt = deletedAtDateTimeTextInput.date; */
      account.email = emailTextInput.text;
      account.backgroundInfo = backgroundInfoTextInput.text;
  
      account.user = User(userComboBox.selectedItem);
    }
   
    private function destroyAccount():void {
      account.destroy({onSuccess: onAccountDestroy});
	  
    }
    
    private function onAccountSelect():void {
      account = RxUtils.clone(accountsList.selectedItem) as Account;
	  const state:String = currentState;
	  currentState='ConsumerItem';
    }
    
    private function onAccountCreate(result:Account):void {
      account = new Account;
	  const state:String = currentState;
	  currentState='Consumers';

    }
    
    private function onAccountUpdate(result:Account):void {
      accountsList.selectedItem = result;
      onAccountSelect();
	  const state:String = currentState;
	  currentState='Consumers';
    }
    
    private function onAccountDestroy(result:Account):void {
      onAccountCreate(result);
    }    
	
	private function returnToList():void{
		const state:String = currentState;
		currentState='Consumers';

	}
  ]]></fx:Script>
	<s:Label text="howdy"/>
  <s:VGroup id="accountsPanel" 
    width="77%" height="100%"
	visible.ConsumerItem="false" includeInLayout.ConsumerItem="false">
    <s:List id="accountsList"
			 visible.ConsumerItem="false"
      width="100%" height="100%"
      dataProvider="{Rx.models.index(Account)}"
      change="onAccountSelect()"/>
    <mx:ControlBar width="100%">
      <mx:Button label="New Account" width="100%" height="30"
        click="newAccount()"/>
    </mx:ControlBar>
  </s:VGroup>
  <s:VGroup width="75%" height="100%"
			visible.Consumers="false" includeInLayout.Consumers="false">
    <mx:Form width="100%" height="100%">
		<mx:FormItem label="Assigned To Name" width="100%">
			<mx:TextInput id="assignedToName" text="User {account.assignee.id}" />
		</mx:FormItem>
		<mx:FormItem label="AssignedTo" width="100%">
			<mx:ComboBox id="assignedToComboBox" width="200"
						 labelField="{User.LABEL}"
						 dataProvider="{Rx.models.index(User)}" prompt="Assignee ..."
						 selectedItem="{account.assignee}"/>
		</mx:FormItem>

      <mx:FormItem label="Name" width="100%">
        <mx:TextInput id="nameTextInput" width="100%" text="{account.name}"/>
      </mx:FormItem>
      <mx:FormItem label="Access" width="100%">
        <mx:TextInput id="accessTextInput" width="100%" text="{account.access}"/>
      </mx:FormItem>
      <mx:FormItem label="Website" width="100%">
        <mx:TextInput id="websiteTextInput" width="100%" text="{account.website}"/>
      </mx:FormItem>
      <mx:FormItem label="TollFreePhone" width="100%">
        <mx:TextInput id="tollFreePhoneTextInput" width="100%" text="{account.tollFreePhone}"/>
      </mx:FormItem>
      <mx:FormItem label="Phone" width="100%">
        <mx:TextInput id="phoneTextInput" width="100%" text="{account.phone}"/>
      </mx:FormItem>
      <mx:FormItem label="Fax" width="100%">
        <mx:TextInput id="faxTextInput" width="100%" text="{account.fax}"/>
      </mx:FormItem>
<!--      <mx:FormItem label="DeletedAt" width="100%">
        <rx:DateTimeTextInput id="deletedAtDateTimeTextInput" width="200" date="{account.deletedAt}"/>
      </mx:FormItem>
-->      <mx:FormItem label="Email" width="100%">
        <mx:TextInput id="emailTextInput" width="100%" text="{account.email}"/>
      </mx:FormItem>
      <mx:FormItem label="BackgroundInfo" width="100%">
        <mx:TextInput id="backgroundInfoTextInput" width="100%" text="{account.backgroundInfo}"/>
      </mx:FormItem>
      <mx:FormItem label="User" width="100%">
        <mx:ComboBox id="userComboBox" width="200"
          labelField="{User.LABEL}"
          dataProvider="{Rx.models.index(User)}" prompt="User ..."
          selectedItem="{account.user}"/>
      </mx:FormItem>
    </mx:Form>
    <mx:ControlBar width="100%">
      <mx:Button label="Cancel" width="50%" height="30"
        click="returnToList()"/>
	  <mx:Button label="Save Account" width="50%" height="30"
		click="saveAccount()"/>
      <mx:Button label="Delete Account" width="50%" height="30"
        enabled="{RxUtils.canDeleteModel(account)}"
        click="destroyAccount()"/>
    </mx:ControlBar>
  </s:VGroup>
	</s:Skin >